관점지향 프로그래밍 : AOP
	-> interceptor : controller로 넘어갈때만 가로챌 수 있다!

AOP를 통해서 직접 트랜잭션을 관리하고 처리할 수 있음
공통의 관심사(횡단관심사)에 따라 하나의 객체로 관리하는방식의 프로그래밍방식
ex)서비스나 DAO에서 insert로 시작하는 모든 메소드를 관리하는 객체 insertCheck
※종단관심사 : 하나의 클래스가 수행해야할 모든 관심사(메소드)
  횡단관심사 : 여러개의 클래스가 수행하는 관심사(메소드) 중 비슷하거나 공통된 관심사(메소드)

AOP 관점 지향 프로그램(객체지향프로그래밍을 더 객체지향적이게 만드는 프로그래밍방식)
 공통의 관심사항(기능) 한 곳에 모아 처리하게 프로그래밍하는 것

용어
 Aspect(=관점) : 공통의 관심사항을 가지고 있는 하나의 객체
		 pointcut, advice를 조합하여 만들어진다.

 JoinPoint : 적용가능한 지점을 의미
	     메소드가 호출되는 부분, 리턴되는 부분
	     인스턴스가 만들어지는 부분, 예외가 던져지는 지점
	     클래스가 초기화되는 지점

 Advice : 공통의 관심사가 실행되는 시점
 before : 
 after : after : 지정 메소드 실행 후
	 after returning : 결과 반환 후
	 after Throwing : 에러 발생 후 -----> transaction처리!!
 around : 전후 모두 각각의 로직 수행

 pointcut : 메소드를 지정하는 방식(패턴으로 지정.)
	    * interceptor에서 "mapping path=/**" 와 비슷한 것!!
 expression(패턴형식! execution(접근제한자 클래스명(패키지포함).메소드명(파라미터)))
                                        * com.kh.spring..*(..)
 
 AOP적용하는 방법
 2가지 방법
  1) 선언적 방법(xml을 이용) : Spring-configuration.xml
	- aop namespace가 필요
	<aop:config>
	  <aop:aspect class=""|ref=""> 
	  //class를 등록할 수 도 있고 등록된 bean을 참조할 수 도 있다.
	    <aop:pointcut expression="execution(표현식)" id=""/>
	    <aop:before|after|around method="aspect로 등록된 객체 메소드명" 
		pointcut-ref="pointcut id"/>
	  </aop:aspect>
	</aop:config>
  2) 어노테이션 방식(programic방법)
	@Component (Spring bean임을 의미)
	@Aspect
	public class AspectTest {
	    @Pointcut("execution(표현식)")
	    public void thatit(){ }

	    @Before|After|Around("thatit()")
	    Before|After일 경우
	    public void 명칭(JoinPoint jp) { }

	    Around일 경우
	    public void 명칭(ProceedingJoinPoint pjp) { }	    
	}
