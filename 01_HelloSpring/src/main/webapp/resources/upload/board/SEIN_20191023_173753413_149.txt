Appender : 전달된 로그를 어디에 어떠한 형식으로 출력할지 결정하는 태그
	위치 : 콘솔, 파일, DB
	형식 : pattern 로그를 출력할 때 클래스, 날짜, 메세지

logger : 로그를 출력해주는 주체(패키지 안의 객체들)
name속성 : 기준이 되는 패키지 -> context:component-scan
level태그 : 레벨에 작성된 기준에 따라 log를 실행
	trace- debug - info - warn - error - fatal
name속성 level의 기준으로 해서 debug라고 명시되어 있으면 다 출력하는데 trace레벨은 무시한다.

root : 모든 logger들의 부모 , 알아서 상속받아서 처리한다.
log4j가 제공하는 클래스중에서 원하는대로 이용하면 된다 ex)ConsoleAppender, RollingAppender(파일로그 찎는거)?

---------pattern형식 내용-------------

* %c : 카테고리명(logger이름)을 표시
	* 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
* %C : 클래스명을 표시함.	
	* 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
	* %d{HH:mm:ss, SSS}
	* %d{yyyy MMM dd HH:mm:ss, SSS}
	* %d{ABSOLUTE} 
	* %d{DATE} 
	* %d{ISO8601}
* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
* %L : 라인 번호만 출력한다(링크없음)
* %m : 로그로 전달된 메시지를 출력한다.
* %M : 로그를 수행한 메소드명을 출력한다. 
* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
* %r : 로그 처리시간 (milliseconds)
* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
* %% : % 표시를 출력. escaping
* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태.