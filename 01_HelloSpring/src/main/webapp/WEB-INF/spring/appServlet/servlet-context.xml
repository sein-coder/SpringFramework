<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven /> <!-- annotation이 지정된 것들을 추적한다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- InternalResourceViewResolver는 servlet에서 알아서 prefix와 suffix를 붙여서 view페이지를 찾게 도와준다.
	ex) common/header만 쓰면 /WEB-INF/views/common/header.jsp 을 찾는다는 말 -->
	
	<context:component-scan base-package="com.kh.spring" />
	<!-- 설정된 기본패키지를 기준으로 소스를 찾는다. -->
	
<!-- 	
	<beans:bean class="com.kh.spring.member.model.service.MemberServiceImpl"/>
	Servlet-context.xmlbean등록 끝!!
	따로 무엇인지 별도의 명시는 할 필요가 없다, 그저 autowired를 할 수 만 있게해주는 기능이기 때문에
	controller,service,repository등을 명시하는것은 개발자가 알아보기 쉽게 표시하는 것
-->
	
</beans:beans>
